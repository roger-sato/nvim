local map = vim.api.nvim_set_keymap
local ns = { noremap = true, silent = true }

vim.g.mapleader = ' '
vim.g.maplocalleader = ' '

map('n', '<leader>c', '<cmd>bd<cr>', ns)
map('n', '<C-l>', '<cmd>bnext<cr>', ns)
map('n', '<C-h>', '<cmd>bprevious<cr>', ns)
map('n', '<leader>-', '<C-w>s', ns)
map('n', '<leader>|', '<C-w>v', ns)
map('n', '<leader>x', '<C-w>c', ns)
map('n', '<leader>j', '<C-w>j', ns)
map('n', '<leader>l', '<C-w>l', ns)
map('n', '<leader>k', '<C-w>k', ns)
map('n', '<leader>h', '<C-w>h', ns)
map('n', '<leader>w', '<cmd>w<cr>', ns)
map('n', '<leader>q', '<cmd>q<cr>', ns)
map('n', '<leader>t', '<cmd>ToggleTerm direction=horizontal<cr>', ns)
map('n', '<ESC>', '<cmd>ToggleTerm<cr>', ns)
map('n', '<leader>T', '<cmd>ToggleTerm direction=float<cr>', ns)
map('n', '<leader>gg', '<cmd>LazyGit<cr>', ns)
map('x', '<C-p>', '"0p', ns)
map('n', '<C-p>', '"0p', ns)
-- map('x', '<C-d>', '"_d', ns)
-- map('n', '<C-d>', '"_d', ns)
map('', ')', '$', ns)
map('n', ')', '$', ns)
map('n', '<leader><leader>dot', '@:', ns)

-- Trouble
map('n', '<C-e>', '<cmd>TroubleToggle<cr>', ns)

-- lsp
map('n', 'gh', '<cmd>lua vim.lsp.buf.hover()<cr>', ns)
-- map('n', 'gd', '<cmd>lua vim.lsp.buf.definition()<cr>', ns)
-- map('n', 'gi', '<cmd>lua vim.lsp.buf.references()<cr>', ns)
map('n', 'gj', '<cmd>lua vim.lsp.buf.formatting()<CR>', ns)
map('n', 'gD', '<cmd>lua vim.lsp.buf.declaration()<CR>', ns)
map('n', 'gI', '<cmd>lua vim.lsp.buf.implementation()<CR>', ns)
-- map('n', 'gt', '<cmd>lua vim.lsp.buf.type_definition()<CR>', ns)
map('n', 'gn', '<cmd>lua vim.lsp.buf.rename()<CR>', ns)
map('n', 'ga', '<cmd>lua vim.lsp.buf.code_action()<CR>', ns)
map('n', 'ge', '<cmd>lua vim.diagnostic.open_float()<CR>', ns)
map('n', 'g]', '<cmd>lua vim.diagnostic.goto_next()<CR>', ns)
map('n', 'g[', '<cmd>lua vim.diagnostic.goto_prev()<CR>', ns)
map('n', 'gk', '<cmd>lua vim.lsp.buf.signature_help()<CR>', ns)
map('n', 'gwa', '<cmd>lua vim.lsp.buf.add_workspace_folder()<CR>', ns)
map('n', 'gwb', '<cmd>lua vim.lsp.buf.remove_workspace_folder()<CR>', ns)
map('n', 'gll', '<cmd>lua print(vim.inspect(vim.lsp.buf.list_workspace_folders()))<CR>', ns)

-- telescope
map('n', '<leader>p', '<cmd>lua require("telescope.builtin").find_files({hidden=true})<cr>', ns)
map('n', '<leader>fg', '<cmd>lua require("telescope.builtin").live_grep()<cr>', ns)
map('n', '<leader>fs', '<cmd>lua require("telescope.builtin").grep_string()<cr>', ns)
map('n', '<leader>fb', '<cmd>lua require("telescope.builtin").buffers()<cr>', ns)
map('n', '<leader>fh', '<cmd>lua require("telescope.builtin").help_tags()<cr>', ns)
map('n', '<leader>fr', '<cmd>lua require("telescope.builtin").registers()<cr>', ns)
map('n', '<leader>fk', '<cmd>lua require("telescope.builtin").keymaps()<cr>', ns)
map('n', '<leader>fj', '<cmd>lua require("telescope.builtin").jumplist()<cr>', ns)
map('n', '<leader>r', '<cmd>lua require("telescope.builtin").resume()<cr>', ns)

map('n', 'grf', '<cmd>lua require("telescope.builtin").lsp_references()<cr>', ns)
-- map('n', '<leader>ic', '<cmd>lua require("telescope.builtin").lsp_incoming_calls()<cr>', ns)
-- map('n', '<leader>oc', '<cmd>lua require("telescope.builtin").lsp_outgoing_calls()<cr>', ns)
-- map('n', '<leader>ds', '<cmd>lua require("telescope.builtin").lsp_document_symbols()<cr>', ns)
-- map('n', '<leader>ws', '<cmd>lua require("telescope.builtin").lsp_workspace_symbols()<cr>', ns)
map('n', 'gws', '<cmd>lua require("telescope.builtin").lsp_dynamic_workspace_symbols()<cr>', ns)
map('n', 'ge', '<cmd>lua require("telescope.builtin").diagnostics()<cr>', ns)
map('n', 'gi', '<cmd>lua require("telescope.builtin").lsp_implementations()<cr>', ns)
map('n', 'gd', '<cmd>lua require("telescope.builtin").lsp_definitions()<cr>', ns)
map('n', 'gtd', '<cmd>lua require("telescope.builtin").lsp_type_definitions()<cr>', ns)
map('n', 'gts', '<cmd>lua require("telescope.builtin").treesitter()<cr>', ns)
map('n', '<leader>gc', '<cmd>lua require("telescope.builtin").git_commits()<cr>', ns)
map('n', '<leader>gv', '<cmd>lua require("telescope.builtin").git_bcommits()<cr>', ns)
map('n', '<leader>gb', '<cmd>lua require("telescope.builtin").git_branches()<cr>', ns)
map('n', '<leader>gs', '<cmd>lua require("telescope.builtin").git_status()<cr>', ns)
